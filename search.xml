<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue+element开发小问题记录</title>
    <url>/2020/05/27/vue-element%E5%BC%80%E5%8F%91%E5%B0%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ol>
<li><p>element-ui分割线不显示</p>
</li>
<li><p>表单验证输入了值却提示不能为空</p>
</li>
<li><p>在axios回调函数中，this为undefined</p>
</li>
<li><p>获取离现在最近的一个整10分</p>
<a id="more"></a>
</li>
<li><h3 id="element-ui分割线不显示"><a href="#element-ui分割线不显示" class="headerlink" title="element-ui分割线不显示"></a>element-ui分割线不显示</h3><p>分析：一般是网页大小不合适</p>
<p>解决：按住ctrl，滚动鼠标滑轮，调整网页显示大小为100%</p>
</li>
<li><h3 id="表单验证输入了值却提示不能为空"><a href="#表单验证输入了值却提示不能为空" class="headerlink" title="表单验证输入了值却提示不能为空"></a>表单验证输入了值却提示不能为空</h3><p>分析：输入的值没能传入到验证规则rules所绑定的值</p>
<p>情况1：item的prop属性与你的输入框绑定的值不一致</p>
<p>　正确示例：item: prop=”name”　input:v-model=”form.name”</p>
<p>情况2：表单form没有绑定值</p>
<p>　正确示例：form : :model=”form”</p>
</li>
<li><h3 id="在axios回调函数中，this为undefined"><a href="#在axios回调函数中，this为undefined" class="headerlink" title="在axios回调函数中，this为undefined"></a>在axios回调函数中，this为undefined</h3><p>分析：</p>
<p>解决方案1：</p>
<p>　使用箭头函数代替匿名函数</p>
<p>解决方案2：</p>
<p>　在进入axios之前将this保存。如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="获取离现在最近的一个整10分"><a href="#获取离现在最近的一个整10分" class="headerlink" title="获取离现在最近的一个整10分"></a>获取离现在最近的一个整10分</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">	<span class="comment">// （现在）-（现在比最近的一个整10分多出来的毫秒数）</span></span><br><span class="line">	<span class="keyword">return</span> now - ( now % <span class="number">600000</span>) </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 10分钟对应600 000毫秒，同理可得到离现在最近的一天，一月，一年 ...</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2020/05/27/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>　　本文用来帮助记录一些hexo博客使用过程中的常用命令。防止后面忘记</p>
<a id="more"></a>

<h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="2-新建文章"><a href="#2-新建文章" class="headerlink" title="2. 新建文章"></a>2. 新建文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>在source &gt; _posts 目录下编辑</p>
<h3 id="3-网站发布"><a href="#3-网站发布" class="headerlink" title="3. 网站发布"></a>3. 网站发布</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>生成静态网页。generate可简化为 g。</p>
<p>生成前建议先清理缓存</p>
<h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>deploy可简化为 d。</p>
<h3 id="5-清理缓存"><a href="#5-清理缓存" class="headerlink" title="5. 清理缓存"></a>5. 清理缓存</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="6-启动本地服务"><a href="#6-启动本地服务" class="headerlink" title="6. 启动本地服务"></a>6. 启动本地服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>默认访问地址为 localhost:4000。</p>
<p>可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server -p 5000</span><br></pre></td></tr></table></figure>

<p>指定端口</p>
]]></content>
  </entry>
  <entry>
    <title>Vue+Element开发：薛定谔的跳转路径</title>
    <url>/2020/02/29/Vue-Element%E5%BC%80%E5%8F%91%EF%BC%9A%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E8%B7%B3%E8%BD%AC%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>开发环境: nodejs:13.9.0 vue:2.5.2 element-ui:2.13.0</p>
<p><strong>问题描述：</strong>　　</p>
<p>　　element-ui的navmenu组件提供了route属性，点击item直接跳转item的index属性对应的路由。但是当我点击item是,<strong>跳转到路由路径有时候正确，有时候不正确</strong>。以item1（index：1-1）为例，正确的路由路径应该是 <a href="http://localhost:8080/#/overview/1-1,但是我点击后却跳转的是http://localhost:8080/#/1-1。" target="_blank" rel="noopener">http://localhost:8080/#/overview/1-1,但是我点击后却跳转的是http://localhost:8080/#/1-1。</a><br>　　本文针对这种代码没有任何修改，拼接出来的路径却不一样的情况进行分析及解决。</p>
<a id="more"></a>


<p>子路由的跟地址是 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/#/overview</span><br></pre></td></tr></table></figure>
<p>正常访问其子页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主路由，其中 /overview 有子路由</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 路由重定向</span></span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/login'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/overview'</span>,</span><br><span class="line">    name: <span class="string">'WaterDisplay'</span>,</span><br><span class="line">    component: WaterDisplay,</span><br><span class="line">    children: overviewRouter</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'Login'</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子路由</span></span><br><span class="line"><span class="keyword">const</span> overviewRouter = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'0'</span>,</span><br><span class="line">    component: InformationSummary</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'1-1'</span>,</span><br><span class="line">    component: WaterDispatch</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'1-2'</span>,</span><br><span class="line">    component: WaterDispatchInput</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'2-1'</span>,</span><br><span class="line">    component:BranchOperation</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'5-2'</span>,</span><br><span class="line">    component: TrafficStatisticsInput</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong> </p>
<p>目前在文档中没看到相关说明，应该是个BUG。</p>
<p><strong>解决方案：</strong></p>
<p>给子路由的空路径添加一个转向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加了空路径转向的子路由</span></span><br><span class="line"><span class="keyword">const</span> overviewRouter = [</span><br><span class="line">  &#123;  <span class="comment">// 子路由中新增的代码</span></span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    redirect: <span class="string">'0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'0'</span>,</span><br><span class="line">    component: InformationSummary</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'1-1'</span>,</span><br><span class="line">    component: WaterDispatch</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'1-2'</span>,</span><br><span class="line">    component: WaterDispatchInput</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'2-1'</span>,</span><br><span class="line">    component: BranchOperation</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'2-2'</span>,</span><br><span class="line">    component: BranchOperationInput</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'3-1'</span>,</span><br><span class="line">    component: PumpStation</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'3-2'</span>,</span><br><span class="line">    component: PumpStationInput</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'4-1'</span>,</span><br><span class="line">    component: WaterDistribution</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'4-2'</span>,</span><br><span class="line">    component: WaterDistributionInput</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'5-1'</span>,</span><br><span class="line">    component: TrafficStatistics</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'5-2'</span>,</span><br><span class="line">    component: TrafficStatisticsInput</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>flask-mongoengine</title>
    <url>/2020/02/22/flask-mongoengine/</url>
    <content><![CDATA[<p><a href="https://pypi.org/project/flask-mongoengine/" target="_blank" rel="noopener">参考1</a></p>
<p><a href="https://dormousehole.readthedocs.io/en/latest/patterns/mongoengine.html#id1" target="_blank" rel="noopener">参考2</a></p>
<p><a href="https://segmentfault.com/a/1190000008025156" target="_blank" rel="noopener">参考3</a></p>
<p>　为了在flask中操作MongoDB，本文从Flask-mongoengine的安装，配置，及对数据库的简单增删改查三方面介绍了Flask-mongoengine。</p>
<hr>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>到本步骤时假设你已安装好flask。</p>
<p>执行下列命令即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install flask-mongoengine</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="创建MongoEngine实例"><a href="#创建MongoEngine实例" class="headerlink" title="创建MongoEngine实例"></a>创建MongoEngine实例</h4><p>​    有两种情况：</p>
<ol>
<li><p>程序前面没用到数据库，直接配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 导入flask和MongoEngine</span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_mongoengine import MongoEngine</span><br><span class="line"># 创建Flask应用实例</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"># 设置Flask应用的数据库配置</span><br><span class="line">app.config.from_pyfile(&#39;the-config.cfg&#39;)</span><br><span class="line"># 以 Flask应用实例 为参数，创建MongoEngine实例</span><br><span class="line">db &#x3D; MongoEngine(app)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建Flask应用之前，已经创建了MongoEngine实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_mongoengine import MongoEngine</span><br><span class="line">db &#x3D; MongoEngine()</span><br><span class="line">...</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">app.config.from_pyfile(&#39;the-config.cfg&#39;)</span><br><span class="line"># 调用MongoEngine实例的init_app()方法</span><br><span class="line">db.init_app(app)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>注：以上两种情况，最终都是将Flask应用实例赋值给了MongoEngine实例的app属性</strong></p>
<h4 id="配置数据库主机"><a href="#配置数据库主机" class="headerlink" title="配置数据库主机"></a>配置数据库主机</h4><p>　<s>如果你的数据库安装在本地主机,且端口是27017的话,暂时不用看这一步</s></p>
<p>　在上一步创建MongoEngine实例中，Flask-MongoEngine默认认为你的数据库实例在本地主机(localhost)的27017端口的名字为test的数据库。如果不是在localhost:27017的test数据库的话，你需要对数据库的主机，端口和名字进行配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.config[&#39;MONGODB_SETTINGS&#39;] &#x3D; &#123;</span><br><span class="line">    &#39;db&#39;: &#39;project1&#39;,</span><br><span class="line">    &#39;host&#39;: &#39;192.168.1.35&#39;,</span><br><span class="line">    &#39;port&#39;: 12345</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　如果访问你的数据库需要验证身份,同样应该在”MongoDBsettings”字典中设置:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">'MONGODB_SETTINGS'</span>] = &#123;</span><br><span class="line">    <span class="string">'db'</span>: <span class="string">'project1'</span>,</span><br><span class="line">    <span class="string">'username'</span>:<span class="string">'webapp'</span>,</span><br><span class="line">    <span class="string">'password'</span>:<span class="string">'pwd123'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><h4 id="创建集合-collection-类似sql中的表"><a href="#创建集合-collection-类似sql中的表" class="headerlink" title="创建集合(collection,类似sql中的表)"></a>创建集合(collection,类似sql中的表)</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Document)</span>:</span></span><br><span class="line">    email = db.StringField(required=<span class="literal">True</span>)</span><br><span class="line">    first_name = db.StringField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = db.StringField(max_length=<span class="number">50</span>)</span><br><span class="line">    year =db.IntField()</span><br></pre></td></tr></table></figure>

<p>User类继承了db.Document, User对应数据库的集合。</p>
<p>类的属性就是此集合所有的字段，对属性的赋值表示字段的类型。</p>
<p>支持的字段：</p>
<ul>
<li><p>StringField</p>
</li>
<li><p>BinaryField</p>
</li>
<li><p>URLField</p>
</li>
<li><p>EmailField</p>
</li>
<li><p>IntField</p>
</li>
<li><p>FloatField</p>
</li>
<li><p>DecimalField</p>
</li>
<li><p>BooleanField</p>
</li>
<li><p>DateTimeField</p>
</li>
<li><p>ListField (using wtforms.fields.FieldList )</p>
</li>
<li><p>SortedListField (duplicate ListField)</p>
</li>
<li><p>EmbeddedDocumentField (using wtforms.fields.FormField and generating inline Form)</p>
</li>
<li><p>ReferenceField (using wtforms.fields.SelectFieldBase with options loaded from QuerySet or Document)</p>
</li>
<li><p>DictField</p>
</li>
</ul>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">user = User()</span><br><span class="line">user.email = <span class="string">'leo@gmail.com'</span></span><br><span class="line">user.first_name = <span class="string">'leo'</span></span><br><span class="line">user.last_name = <span class="string">'yuan'</span></span><br><span class="line">user.year = <span class="number">18</span></span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure>

<p>User实例对应于数据库的文档(document，类似sql中的行),实例的属性对应数据库的字段(field, 类似于sql中的列)，当调用了实例的.save()方法，本文档就会存进数据库中的User集合中。</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>使用类的 <code>objects</code> 属性来执行查询。关键字参数用于字段的等值查询:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会返回User集合中的所有文档</span></span><br><span class="line">user.objects()</span><br><span class="line"><span class="comment"># 会返回user中所有first_name = leo的文档</span></span><br><span class="line">user.objects(first_name=<span class="string">'leo'</span>)</span><br></pre></td></tr></table></figure>

<p>字段名称后加双下划线可以连接查询操作符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 会返回User集合中所有year大于等于18的文档</span><br><span class="line">user.objects(year__gte&#x3D;18)</span><br></pre></td></tr></table></figure>

<p>查询操作符：</p>
<ul>
<li><code>ne</code> – 不等于<code>≠</code></li>
<li><code>lt</code> – 小于<code>&lt;</code></li>
<li><code>lte</code> – 小于等于<code>≤</code></li>
<li><code>gt</code> – 大于<code>&gt;</code></li>
<li><code>gte</code> – 大于等于 <code>≥</code></li>
<li><code>not</code> – 否定一个标准的检查，需要用在其他操作符之前(e.g. <code>Q(age__not__mod=5)</code>)</li>
<li><code>in</code> – 值在 <code>list</code> 中</li>
<li><code>nin</code> – 值不在 <code>list</code> 中</li>
<li><code>mod</code> – <code>value % x == y</code>, 其中 <code>x</code> 和 <code>y</code> 为给定的值</li>
<li><code>all</code> – <code>list</code> 里面所有的值</li>
<li><code>size</code> – 数组的大小</li>
<li><code>exists</code> – 存在这个值</li>
</ul>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会将User集合中last_name = yuan的文档 first_name更新为zhe</span></span><br><span class="line">user.objects(last_name=<span class="string">'yuan'</span>).update(first_name=<span class="string">'zhe'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会从数据库中删除User集合中所有year大于等于18的文档</span></span><br><span class="line">user.objects(year__gte=<span class="number">18</span>).delete()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>flask MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的flask应用</title>
    <url>/2020/02/22/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84flask%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://dormousehole.readthedocs.io/en/latest/quickstart.html" target="_blank" rel="noopener">参考</a></p>
<p>本文以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#39;Hello, World!&#39;</span><br></pre></td></tr></table></figure>

<p>为样例进行解释，帮助初学者对flask应用有一个初步认识。</p>
<hr>
<a id="more"></a>

<p>　这个程序是一个后端处理程序，当用flask运行这个应用的，会启动一个非常简单的内建的服务器，而这个服务器的处理逻辑，就是上面这几行代码。(关于如何运行flask应用，见参考链接)</p>
<p>　本程序共有5行代码，前两行会在启动服务器的时候会执行，分别是导入Flask类和创建一个Flask类的实例对象。</p>
<p>　最后两行是定义了一个函数，返回一段字符串。</p>
<p>　第三行是一个装饰器，他的作用是：当你访问前端网站根目录时，前端会向后端请求根目录处理逻辑，后端服务器会给前端返回 被本装饰器装饰的函数 的运行结果。(1. 本行中(‘/‘)代表服务器根目录。 2. 装饰器会作用于他后面紧跟着的那个函数。)</p>
<p>​    <strong>附：</strong></p>
<p>　flask应用的运行</p>
<p>　<img src="/2020/02/22/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84flask%E5%BA%94%E7%94%A8/run.png" class="" title="运行"></p>
<p>　上图是官方文档给出的具体运行方式。这里主要解释下这样做的具体涵义和原因。</p>
<p>运行分为两步：</p>
<ol>
<li>设置环境变量FLASK_APP。设置了后，访问FLASK_APP就相当于访问hello.py这个文件</li>
<li>python -m 命令的意思的 将python模块当作脚本去运行</li>
</ol>
<p>当运行flask应用的时候，flask需要一个Flask实例，他会先去FLASK_APP这个环境变量中找，如果没有指定FLASK_APP的话，会去项目根目录下的wsgi.py或app.py文件里去找。</p>
]]></content>
      <tags>
        <tag>flask python框架 后端</tag>
      </tags>
  </entry>
  <entry>
    <title>postman的使用</title>
    <url>/2020/02/21/postman%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>​    本博文主要从下图中的五个部分介绍postman的简单使用。</p>
<p>​    <img src="/2020/02/21/postman%E7%9A%84%E4%BD%BF%E7%94%A8/home.png" class="" title="首页"></p>
<p>1.请求方式 2.请求地址 3.请求参数 4.保存 5.环境变量</p>
<hr>
<p>​    <a id="more"></a></p>
<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>常用的请求方式有GET, POST, PUT, DELETE。</p>
<p><strong>GET:</strong> 一般用于从后端获取数据</p>
<p><strong>POST:</strong> 给后端发送数据（偏向创建新数据）</p>
<p><strong>PUT:</strong> 给后端发送数据（偏向更新已存在的数据）</p>
<p><strong>DELETE:</strong> 一般用于删除请求</p>
<h3 id="请求地址"><a href="#请求地址" class="headerlink" title="请求地址"></a>请求地址</h3><p>api请求地址，一般使用名词。</p>
<p>例如：<a href="http://127.0.0.1:5000/appliance/equipment" target="_blank" rel="noopener">http://127.0.0.1:5000/appliance/equipment</a></p>
<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>经常在Params和Body里面填请求参数。</p>
<p>POST和PUT请求在Body里面选x-www-form-urlencoded 填参数</p>
<p>GET和DELETE请求在Params里面填参数</p>
<p>注：</p>
<ul>
<li><p>传输数组。以数组ids为例：</p>
<img src="/2020/02/21/postman%E7%9A%84%E4%BD%BF%E7%94%A8/array.png" class="" title="数组ids">
</li>
<li><p>params中的参数会自动跟在链接后面，Body中的参数不会。</p>
</li>
</ul>
<h3 id="将此请求保存，以重复使用"><a href="#将此请求保存，以重复使用" class="headerlink" title="将此请求保存，以重复使用"></a>将此请求保存，以重复使用</h3><p>保存后会保存到左侧的Collections, 保存前必须建立一个文件夹（collection）</p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>​    一般的网页登录验证通过后会返回给你一个<a href="https://baike.baidu.com/item/Token/2615248?fr=aladdin" target="_blank" rel="noopener">token</a>。如果访问有登录验证的网页需要将token 填在 Authorization中的Token栏中。但是每个token经常变动，每次请求都需要复制粘贴，太麻烦。</p>
<p>​    所以将token设置为环境变量，在 Authorization中的Token栏中填入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;token&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>以引用环境变量（type选 Bearer Token）。</p>
<p>​    <img src="/2020/02/21/postman%E7%9A%84%E4%BD%BF%E7%94%A8/token.png" class="" title="token"></p>
<p>具体怎么设置token环境变量，可以百度。</p>
]]></content>
      <tags>
        <tag>后端 postman</tag>
      </tags>
  </entry>
  <entry>
    <title>git多人项目常用命令</title>
    <url>/2020/02/21/git%E5%A4%9A%E4%BA%BA%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>​    作为一个git新手，做项目的时候，经常各种代码版本问题搞得头大，所以就把各种常用命令记录了下来。</p>
<a id="more"></a>

<img src="/2020/02/21/git%E5%A4%9A%E4%BA%BA%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/command.png" class="" title="git命令">]]></content>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title>不完美越狱插件导致不能开机</title>
    <url>/2020/02/21/%E4%B8%8D%E5%AE%8C%E7%BE%8E%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8D%E8%83%BD%E5%BC%80%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>​    <strong>机型</strong>：iPhone8 iOS 13.3.1</p>
<p>​    <strong>越狱方式</strong>: Linux + checkra1n</p>
<p>​    安装了一个插件后，卡在重启springboard界面，只能强制关机重启（按一下音量+,按一下音量-，再长按关机键）。重启后自然入狱。</p>
<p>​    尝试再次越狱，然后卡在了 Entered download mode界面,强制重启后白苹果。再次强制重启进入入狱状态(正常启动，但是没有越狱)。</p>
<p>​    <img src="/2020/02/21/%E4%B8%8D%E5%AE%8C%E7%BE%8E%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8D%E8%83%BD%E5%BC%80%E6%9C%BA/p1.png" class="" width="300"></p>
<p>​    <img src="/2020/02/21/%E4%B8%8D%E5%AE%8C%E7%BE%8E%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8D%E8%83%BD%E5%BC%80%E6%9C%BA/p2.JPG" class="" width="300"></p>
<a id="more"></a>

<h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>​    当卡在Entered download mode 界面的时候其实已经完成越狱，但是安装的插件导致不能以越狱状态启动。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol>
<li><p>先强制重启进入未越狱状态的系统</p>
</li>
<li><p>打开越狱工具，选择Options</p>
<img src="/2020/02/21/%E4%B8%8D%E5%AE%8C%E7%BE%8E%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8D%E8%83%BD%E5%BC%80%E6%9C%BA/p3.png" class="" width="500">
</li>
<li><p>选中安全模式(safe mode)，然后返回。</p>
<img src="/2020/02/21/%E4%B8%8D%E5%AE%8C%E7%BE%8E%E8%B6%8A%E7%8B%B1%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8D%E8%83%BD%E5%BC%80%E6%9C%BA/p4.png" class="" width="500">

<p>越狱后将以安全模式启动</p>
</li>
<li><p>执行一遍越狱流程，就能以越狱状态（安全模式）启动。</p>
</li>
<li><p>这时发现能再次进入Cydia，将导致白苹果的插件卸载。（一般是你安装的最后一个插件，不是的话。从最后一个往前，一个一个试，实在不行就卸载所有插件从头开始）</p>
</li>
<li><p>退出安全模式</p>
<p>重启springboard发现还在安全模式，手机里也找不到退出安全模式的方法。</p>
<p>我的解决方案是 不要勾选安全模式，再次越狱。</p>
<p>如果有大佬知道不用重启，退出安全模式的方法的话，烦请告知。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>越狱 ios13.3.1 checkra1n</tag>
      </tags>
  </entry>
  <entry>
    <title>乌班图换源(没有vim的情况)</title>
    <url>/2020/02/20/%E4%B9%8C%E7%8F%AD%E5%9B%BE%E6%8D%A2%E6%BA%90-%E6%B2%A1%E6%9C%89vim%E7%9A%84%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>背景：安装了乌班图LTS，里面很精简，很多常用的工具都没有，需要手动安装，但是外网下载太慢，需要换源。网上多数乌班图换源需要用到vim编辑器，但是vim也需要自己下载。所以有了此教程，先换源，再下载vim … 等其它软件。</p>
<a id="more"></a>



<ol>
<li>打开命令行(terminal)，进入/etc/apt/</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd /etc/apt/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>备份原来的源</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo cp sources.list sources_init.list</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>直接把下面这些复制进命令行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">echo <span class="string">"deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties"</span>&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial universe"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://archive.canonical.com/ubuntu xenial partner"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb-src http://archive.canonical.com/ubuntu xenial partner"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe"</span>&gt;&gt;sources.list</span><br><span class="line">echo <span class="string">"deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse"</span>&gt;&gt;sources.list</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Ubuntu 阿里云 换源</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime3 配置 c#环境</title>
    <url>/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>主要步骤：</p>
<ul>
<li><p>1.<strong>下载并安装sublime 与 .NET Framework</strong></p>
</li>
<li><p>2.<strong>配置环境变量</strong></p>
</li>
<li><p>3.<strong>编写批处理脚本runCsharp.bat</strong></p>
</li>
<li><p>4.<strong>定制sublime text对C#的编译系统</strong></p>
</li>
<li><p>5.<strong>测试</strong></p>
</li>
</ul>
<a id="more"></a> 


<p><a href="https://blog.csdn.net/wuyujin1997/article/details/82726082" target="_blank" rel="noopener">参考链接</a></p>
<h3 id="1-下载并安装sublime-与-NET-Framework"><a href="#1-下载并安装sublime-与-NET-Framework" class="headerlink" title="1.下载并安装sublime 与 .NET Framework"></a>1.下载并安装sublime 与 .NET Framework</h3><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">sublime官网</a><br><a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=42642" target="_blank" rel="noopener">.NET Framework官网</a><br>或者这里，啥都能<a href="https://www.baidu.com" target="_blank" rel="noopener">下载</a><br>安装 .NET的时候记住安装目录，一般默认就行</p>
<h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><ul>
<li><p><strong>配置</strong><br>我的.NET安装在默认目录，我们要用路径<code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319</code>下的可执行程序<code>csc.exe</code>。</p>
<img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p2.1.png" class="" title="2.1">


</li>
</ul>
<p>  右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量中找到Path，双击，新建，将<code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319</code>填入，然后确认。</p>
  <img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p2.2.png" class="" title="2.2">

  <img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p2.3.png" class="" title="2.3">

  <img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p2.4.png" class="" title="2.4">

  <img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p2.5.png" class="" title="2.5">

<ul>
<li><strong>检查</strong><br><code>Ctrl + R</code>打开运行小窗口，输入<code>cmd</code>，确认，在命令窗口输入<code>csc</code>,弹出以下界面就说明配置成功了，否则检查以上步骤。<h3 id="3-编写批处理脚本runCsharp-bat"><a href="#3-编写批处理脚本runCsharp-bat" class="headerlink" title="3.编写批处理脚本runCsharp.bat"></a>3.编写批处理脚本runCsharp.bat</h3>在目录<code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319</code> ( 其它在path环境的路径也可以 ) 下创建文件<code>runCsharp.bat</code>，编辑内容。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cd %~dp1</span><br><span class="line"><span class="keyword">if</span> exist %~n1.exe (</span><br><span class="line">	del %~n1.exe</span><br><span class="line">)</span><br><span class="line">csc %~nx1</span><br><span class="line"><span class="keyword">if</span> exist %~n1.exe (</span><br><span class="line">	echo cmd: ./%~n1.exe </span><br><span class="line">	start %~n1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<s>如果这个目录下不能创建文件，可以在桌面创建，复制进去。</s><h3 id="4-定制sublime-text对C-的编译系统"><a href="#4-定制sublime-text对C-的编译系统" class="headerlink" title="4.定制sublime text对C#的编译系统"></a>4.定制sublime text对C#的编译系统</h3>打开sublime 软件，依次选择 tools -&gt; Build System -&gt; New Build System 。新建文件<code>CSharp.sublime-build</code> , 内容为:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">"cmd"</span>: [<span class="string">"runCSharp.bat"</span>, <span class="string">"$file"</span>],</span><br><span class="line">	<span class="string">"file_regex"</span>: <span class="string">"^(...*?):([0-9]*):?([0-9]*)"</span>,</span><br><span class="line">	<span class="string">"selector"</span>: <span class="string">"source.cs"</span>,</span><br><span class="line">	<span class="string">"encoding"</span>: <span class="string">"cp936"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p4.1.png" class="" title="4.1">

</li>
</ul>
<img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p4.1.png" class="" title="4.1">

<p><s>记得保存！</s></p>
<h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>编写个简单的hello world程序测试一下！<br>新建一个文件<code>HelloWorld.cs</code> , 输入以下内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args) &#123;</span><br><span class="line">		Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">		Console.Read();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按住Ctrl+B，选择自己刚才在第四步配置的编译系统，Enter！</p>
<img src="/2019/09/01/sublime3-%E9%85%8D%E7%BD%AE-c-%E7%8E%AF%E5%A2%83/p5.1.png" class="" title="5.1">]]></content>
      <tags>
        <tag>sublime C# CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++语言杂记</title>
    <url>/2019/08/15/C-C-%E8%AF%AD%E8%A8%80%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="C-语言-字符串输入"><a href="#C-语言-字符串输入" class="headerlink" title="C 语言-字符串输入"></a>C 语言-字符串输入</h1><p>C 库函数 <strong>char *gets(char *str)</strong> 从标准输入 stdin 读取一行，并把它存储在 str 所指向的字符串中。<strong>当读取到换行符时，或者到达文件末尾时</strong>，它会停止，具体视情况而定。</p>
<p>scanf() 期待输入的格式与您给出的 %s 和 %d 相同，这意味着您必须提供有效的输入，比如 “string integer”，如果您提供的是 “string string” 或 “integer integer”，它会被认为是错误的输入。另外，<strong>在读取字符串时，只要遇到一个空格</strong>，scanf() 就会停止读取。</p>
<h2 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h2><p>atoi (表示 alphanumeric to integer)。windows 环境下，在 &lt;stdlib.h&gt; 头文件中。</p>
<p>注：atoi（）参数接受char[],char *，不接受为 string 类型。</p>
<p>要转换string 类型，可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string s&#x3D;&quot;123456&quot;;	</span><br><span class="line">cout&lt;&lt;atoi(&amp;s[0])&lt;&lt;endl;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C语言 C++</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式的学习笔记</title>
    <url>/2019/07/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式 (Design pattern) 是软件开发人员再软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是一代代前辈反复验证后，总结出来的。</p>
<a id="more"></a>



<h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><h3 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1.创建型模式"></a>1.创建型模式</h3><p>​    创建对象的同时隐藏创建逻辑。</p>
<h4 id="包括"><a href="#包括" class="headerlink" title="包括:"></a>包括:</h4><ul>
<li>工厂模式（ Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>单例模式（Singleton Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
</ul>
<h3 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2.结构型模式"></a>2.结构型模式</h3><p>​    关注类和对象的组合</p>
<h4 id="包括："><a href="#包括：" class="headerlink" title="包括："></a>包括：</h4><ul>
<li>适配器模式（Adapter Pattern）</li>
<li>桥接模式（Bridge Pattern）</li>
<li>过滤器模式（Filter Pattern）</li>
<li>组合模式（Composite Pattern）</li>
<li>装饰器模式（Decorator Pattern）</li>
<li>外观模式（Facade Pattern）</li>
<li>享元模式（Flyweight Pattern）</li>
<li>代理模式（Proxy Pattern）</li>
</ul>
<h3 id="3-行为模式"><a href="#3-行为模式" class="headerlink" title="3.行为模式"></a>3.行为模式</h3><p>​    特别关注对象之间的通信</p>
<ul>
<li><p>MVC模式（MVC Pattern）</p>
</li>
<li><p>业务代表模式（Business Delegate Pattern）</p>
</li>
<li><p>组合实体模式（Composite Entity Pattern）</p>
</li>
<li><p>数据访问对象模式（Data Access Object Pattern）</p>
</li>
<li><p>前端控制器模式（Front Controller Pattern）</p>
</li>
<li><p>拦截过滤器模式（Intercepting Filter Pattern）</p>
</li>
<li><p>服务器定位模式（Service Locator Pattern）</p>
</li>
<li><p>传输对象模式（Transfer Object Pattern）</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/08/the-relationship-between-design-patterns.jpg" alt="设计模式之间的关系"></p>
</li>
</ul>
<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h3 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1.开闭原则"></a>1.开闭原则</h3><p>​    对扩展开放，对修改关闭。当程序需要扩展的时候，不能修改原有的代码，应当使用继承和实现。</p>
<h3 id="2-里氏代换原则"><a href="#2-里氏代换原则" class="headerlink" title="2.里氏代换原则"></a>2.里氏代换原则</h3><p>​    任何基类可以出现的地方，可以用子类替换。</p>
<h3 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3.依赖倒置原则"></a>3.依赖倒置原则</h3><p>​    要求对抽象进行编程，不要编程实现。</p>
<h3 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h3><p>​    一个接口扮演一个角色，不同的角色应当交给不同的接口。</p>
<h3 id="5-迪米特法则，又称最少知道原则"><a href="#5-迪米特法则，又称最少知道原则" class="headerlink" title="5.迪米特法则，又称最少知道原则"></a>5.迪米特法则，又称最少知道原则</h3><p>​    </p>
<h3 id="6-合成复用原则"><a href="#6-合成复用原则" class="headerlink" title="6.合成复用原则"></a>6.合成复用原则</h3>]]></content>
      <tags>
        <tag>java 设计模式</tag>
      </tags>
  </entry>
</search>
